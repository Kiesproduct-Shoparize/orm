<?php

namespace {{ namespace }}\Models\Base;

use {{ namespace }}\Models;
use {{ namespace }}\TableGateways;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;
use ⌬\Controllers\Abstracts\Model as AbstractModel;
use ⌬\Database\Interfaces\ModelInterface as ModelInterface;
use ⌬\⌬ as App;

{% include '_overwrite_warning.twig' %}
{% set existingMethods = [] %}

abstract class Base{{ class_name }}Model extends AbstractModel implements ModelInterface
{
    // Declare what fields are available on this object
{% for column in columns %}
    public const FIELD_{{ column.getFieldSanitised|upper }} = '{{ column.getDbField }}';
{% endfor %}

{% for column in columns %}
    public const TYPE_{{ column.getFieldSanitised|upper }} = '{{ column.getDbType }}';
{% endfor %}

    // Constant arrays defined by ENUMs
{% for column in columns %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
    public const OPTIONS_{{ column.getFieldSanitised|upper }} = ["{{ column.getPermittedValues | join('", "') | raw }}"];
{% endif %}
{% endfor %}

    // Constants defined by ENUMs
{% for column in columns %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
{% for permittedValue in column.getPermittedValues %}
    public const {{ column.getFieldSanitised|upper }}_{{ permittedValue|upper|replace({'-':'_'}) }} = '{{ permittedValue }}';
{% endfor %}
{% endif %}
{% endfor %}

{% if primary_keys %}
    protected $_primary_keys = ['{{ primary_keys|join('\', \'')|raw }}'];

{% endif %}
{% if autoincrement_keys %}
    protected $_autoincrement_keys = ['{{ autoincrement_keys|join('\', \'')|raw }}'];

{% endif %}
{% for column in columns %}
{% if column.default_value %}
    protected ${{ column.getFieldSanitised }} = '{{ column.default_value }}';
{% else %}
    protected ${{ column.getFieldSanitised }};
{% endif %}
{% endfor %}

    /**
     * @param array $data an array of a Models\{{ class_name }}Model's properties
     *
     * @return Models\{{ class_name }}Model
     */
    public static function factory(array $data = [])
    {
        return parent::factory($data);
    }

    /**
     * Returns an array describing the properties of this model.
     *
     * @return array
     */
    public function getPropertyMeta(): array
    {
{% for column in columns %}
{% if column.hasRelatedObjects %}
        ${{ column.getField|replace({"Id":"s"}) }}Service = App::Container()->get(Services\{{ column.getModel.getClassName }}Service::class);
{% endif %}
{% endfor %}
        return [
{% for column in columns %}
            self::FIELD_{{ column.getFieldSanitised|upper }} => [
                'type' => self::TYPE_{{ column.getFieldSanitised|upper }},
{% if column.getMaxLength > 0 %}
                'length' => {{ column.getMaxLength }},
{% endif %}
{% if column.getDbType == 'enum' and column.getPhpType == 'string' %}
                'options' => [
{% for permittedValue in column.getPermittedValues %}
                    '{{ permittedValue }}',
{% endfor %}
                ],
{% if column.getDefaultvalue %}
                'default' => '{{ column.getDefaultValue() }}',
{% endif %}
{% endif %}
{% if column.hasRelatedObjects %}
                'remoteOptionsLoader' => ${{ column.getField|replace({"Id":"s"}) }}Service->getAll(),
{% endif %}
            ],
{% endfor %}
        ];
    }

{% for column in columns %}
    /**
     * @return {{ column.phptype }}
     */
    public function get{{ column.getPropertyFunction }}(){{ column.phptype ?  ": ?#{column.phptype}" }}
    {
        return $this->{{ column.getFieldSanitised }};
    }

    /**
     * @param {{ column.phptype }} ${{ column.getFieldSanitised }}
     *
     * @return self
     */
    public function set{{ column.getPropertyFunction }}({{ column.phptype }} ${{ column.getFieldSanitised }} = null): self
    {
        $this->{{ column.getFieldSanitised }} = ${{ column.getFieldSanitised }};

        return $this;
    }

{% endfor %}
{% for related_object in related_objects %}
    /**
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
{% if related_object.getRemoteFunctionName != class_name %}
    public function fetch{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object(): ?Models\{{ related_object.getRemoteClass }}Model
{% else %}
    public function fetchRelated{{ related_object.getRemoteFunctionName|singularize|transform_camel_to_studly }}Object(): ?Models\{{ related_object.getRemoteClass }}Model
{% endif %}
    {
        /** @var ${{ related_object.getRemoteClass }}Service Services\{{ related_object.getRemoteClass }}Service */
        ${{ related_object.getRemoteClass }}Service = App::Container()->get(Services\{{ related_object.getRemoteClass }}Service::class);
{% if related_object.getRemoteBoundColumn == 'id' %}
        return ${{ related_object.getRemoteClass }}Service->getById($this->{{ related_object.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ related_object.getRemoteClass }}Service->getByField('{{ related_object.getRemoteBoundColumn }}', $this->{{ related_object.getLocalBoundColumnGetter }}());
{% endif %}
    }

{% endfor %}
{% if remote_objects %}
{% for remote_object in remote_objects %}
{% if remote_object.getLocalClass != class_name %}
{% if remote_object.getLocalFunctionName|singularize|transform_camel_to_studly not in existingMethods %}
{% set existingMethods = existingMethods|merge([ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly ]) %}

    /**
     * Fetch a singular {{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }} that references this Models\{{ class_name }}Model.
     *
     * @param $orderBy string Column to order by. Recommended to use the Constants in Models\{{ remote_object.getLocalClass }}Model::
     * @param $orderDirection string Either "DESC" or "ASC". Recommend using Select::ORDER_ASCENDING or Select::ORDER_DESCENDING
     *
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
    public function fetch{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Object(
{% if remote_object.local_model_key != 'id' %}
        $orderBy = null,
        $orderDirection='ASC'
{% endif %}
    ): ?Models\{{ remote_object.getLocalClass }}Model {
        /** @var ${{ remote_object.getLocalVariable }}Service Services\{{ remote_object.getLocalClass }}Service */
        ${{ remote_object.getLocalVariable }}Service = App::Container()->get(Services\{{ remote_object.getLocalClass }}Service::class);
{% if remote_object.local_model_key == 'id' %}
        return ${{ remote_object.getLocalVariable }}Service->getById($this->{{ column.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ remote_object.getLocalVariable }}Service->getByField('{{ remote_object.getLocalBoundColumn }}', $this->{{ remote_object.getRemoteBoundColumnGetter }}(), $orderBy, $orderDirection);
{% endif %}
    }

    /**
     * Fetch all matching {{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }} that reference this Models\{{ class_name }}Model.
     *
     * @param $limit int Number to fetch maximum
     * @param $orderBy string Column to order by. Recommended to use the Constants in Models\{{ remote_object.getLocalClass }}Model::
     * @param $orderDirection string Either "DESC" or "ASC". Recommend using Select::ORDER_ASCENDING or Select::ORDER_DESCENDING
     *
     * @return Models\{{ remote_object.getLocalClass }}Model[]
     *
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
    public function fetch{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects(
        int $limit = null,
        string $orderBy = null,
        string $orderDirection='ASC'
    ): ?array {
        /** @var ${{ remote_object.getLocalVariable }}Service Services\{{ remote_object.getLocalClass }}Service */
        ${{ remote_object.getLocalVariable }}Service = App::Container()->get(Services\{{ remote_object.getLocalClass }}Service::class);
{% if remote_object.local_model_key == 'id' %}
        return ${{ remote_object.getLocalVariable }}Service->getManyById($this->{{ column.getLocalBoundColumnGetter }}(), $orderBy, $orderDirection);
{% else %}
        return ${{ remote_object.getLocalVariable }}Service->getManyByField('{{ remote_object.getLocalBoundColumn }}', $this->{{ remote_object.getRemoteBoundColumnGetter }}(), $limit, $orderBy, $orderDirection);
{% endif %}
    }

    /**
     * Count the number of matching {{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }} that reference this Models\{{ class_name }}Model.
     * Returns the number of objects found.
     *
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
    public function count{{ remote_object.getLocalFunctionName|singularize|transform_camel_to_studly }}Objects(): int {
        /** @var ${{ remote_object.getLocalVariable }}Service Services\{{ remote_object.getLocalClass }}Service */
        ${{ remote_object.getLocalVariable }}Service = App::Container()->get(Services\{{ remote_object.getLocalClass }}Service::class);
{% if remote_object.local_model_key == 'id' %}
        return ${{ remote_object.getLocalVariable }}Service->countById($this->{{ column.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ remote_object.getLocalVariable }}Service->countByField('{{ remote_object.getLocalBoundColumn }}', $this->{{ remote_object.getRemoteBoundColumnGetter }}());
{% endif %}
    }
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
    /**
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
    public function save(): Models\{{ class_name }}Model
    {
        /** @var TableGateways\{{ class_name }}TableGateway $tableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);

        return $tableGateway->save($this);
    }

    /**
     * Destroy the current record.
     * Returns the number of affected rows.
     *
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
    public function destroy(): int
    {
        /** @var TableGateways\{{ class_name }}TableGateway $tableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);

        return $tableGateway->delete($this->getPrimaryKeys());
    }

    /**
     * Destroy the current record, and any dependencies upon it, recursively.
     * Returns the number of affected rows.
     *
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
    public function destroyThoroughly(): int
    {
{% if remote_objects.length > 0 %}
        $countOfThingsDestroyed = 0;
        $thingsToDestroy = [];
{% for remote_object in remote_objects %}
        ${{ remote_object.getLocalFunctionName }}Objects = $this->fetch{{ remote_object.getLocalFunctionName }}Objects();
        if ( is_array(${{ remote_object.getLocalFunctionName }}Objects) ) {
            $thingsToDestroy = array_merge($thingsToDestroy, ${{ remote_object.getLocalFunctionName }}Objects);
        }
{% endfor %}
        if(count($thingsToDestroy) > 0){
            foreach($thingsToDestroy as $thingToDestroy){
                /** @var $thingToDestroy ModelInterface */
                $countOfThingsDestroyed+= $thingToDestroy->destroyThoroughly();
            }
        }
        $this->destroy();
        $countOfThingsDestroyed++;
        return $countOfThingsDestroyed;
{% else %}
        return $this->destroy();
{% endif %}
    }

    /**
     * Provides an array of all properties in this model.
     *
     * @return string[]
     */
    public function getListOfProperties(): array
    {
        return [
{% for column in columns %}
            '{{ column.getDbField }}' => '{{ column.getFieldSanitised }}',
{% endfor %}
        ];
    }
}
