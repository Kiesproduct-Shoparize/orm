<?php

namespace {{ namespace }}\Test\Services\Generated;

use {{ namespace }}\TableGateways\{{ class_name }}TableGateway;
use {{ namespace }}\Services;
use {{ namespace }}\Models\{{ class_name }}Model;
use Laminas\Db\Sql\Select;
use Laminas\Db\Sql\Where;
use ⌬\Tests\BaseTestCase;
use \⌬\⌬ as App;

/**
 * @covers \{{ namespace }}\Services\{{ class_name }}Service
 * @covers \{{ namespace }}\Services\Base\Base{{ class_name }}Service
 *
 * @group generated
 * @group services
 * @internal
 **/
class {{ class_name }}Test extends BaseTestCase
{
    protected Services\{{ class_name }}Service ${{ variable_name }}Service;
    protected {{ class_name }}TableGateway ${{ variable_name }}TableGateway;

    /** @var {{ class_name }}Model[] */
    private static array $MockData = [];

    /**
     * @beforeClass
     */
    public static function setup{{ class_name }}MockData(): void
    {
        /** @var {{ class_name }}TableGateway ${{ variable_name }}TableGateway */
        ${{ variable_name }}TableGateway = App::Container()->get({{ class_name }}TableGateway::class);
        for($i = 0; $i <= 5; $i++){
            self::$MockData[] = ${{ variable_name }}TableGateway
                ->getNewMockModelInstance()
                ->save();
        }
    }

    /**
     * @before
     */
    public function setup{{ class_name }}Service(): void
    {
        $this->{{ variable_name }}Service = App::Container()->get(Services\{{ class_name }}Service::class);
    }

    /**
     * @before
     */
    public function setup{{ class_name }}TableGateway(): void
    {
        $this->{{ variable_name }}TableGateway = App::Container()->get({{ class_name }}TableGateway::class);
    }

    public function testGetNewModelInstance()
    {
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $this->{{ variable_name }}Service->getNewModelInstance()
        );
    }

    /**
     * @large
     */
    public function testGetAll()
    {
        $all = $this->{{ variable_name }}Service->getAll();
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            reset($all)
        );
    }

    public function testGetRandom()
    {
        $random = $this->{{ variable_name }}Service->getRandom();
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $random
        );

        return $random;
    }

    /**
     * @depends testGetRandom
     */
    public function testGetByPrimaryKeys({{ class_name }}Model $random)
    {
        /** @var {{ class_name }}Model $found */
{% for primary,db in primary_keys %}
        // By {{ primary }}
        $found = $this->{{ variable_name }}Service->getByField({{ class_name }}Model::FIELD_{{ primary|upper }}, $random->get{{ primary }}());
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $found
        );
        $this->assertEquals($random, $found);
{% endfor %}
    }

    /**
     * @depends testGetRandom
     */
    public function testCreateFromArray({{ class_name }}Model $random)
    {
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $this->{{ variable_name }}Service->createFromArray($random->__toArray())
        );
    }

    public function testGetMockObject()
    {
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $this->{{ variable_name }}Service->getMockObject()
        );
    }

    /**
     * @depends testGetRandom
     */
    public function testGetByField({{ class_name }}Model $random)
    {
{% for column in columns %}
{% if column.getDbType == 'json' %}
        // @todo Write a set of lookups that use MySQL 5.7 JSON field shizzle.
{% else %}
        $found = $this->{{ variable_name }}Service->getByField(
            {{ class_name }}Model::FIELD_{{ column.getFieldSanitised|upper }},
            $random->get{{ column.getPropertyFunction }}()
        );
{% endif %}
        $this->assertInstanceOf(
            {{ class_name }}Model::class,
            $found,
            "Calling Services\\{{ class_name }}Service->getByField(({{ class_name }}Model::FIELD_{{ column.getFieldSanitised|upper }}) failed to find a {{ class_name }}Model"
        );
{% endfor %}
    }

    /**
     * @depends testGetRandom
     */
    public function testCountByField({{ class_name }}Model $random)
    {
{% for column in columns %}
{% if column.getDbType == 'json' %}
            // @todo Write a set of lookups that use MySQL 5.7 JSON field shizzle.
{% else %}
        $found = $this->{{ variable_name }}Service->countByField({{ class_name }}Model::FIELD_{{ column.getFieldSanitised|upper }}, $random->get{{ column.getPropertyFunction }}());
{% endif %}
        $this->assertGreaterThanOrEqual(
            1,
            $found,
            "Calling Services\\{{ class_name }}Service->countByField({{ class_name }}Model::FIELD_{{ column.getFieldSanitised|upper }}) failed to count a {{ class_name }}Model"
        );
{% endfor %}
    }

    /**
     * @depends testGetRandom
     */
    public function testGetManyByField({{ class_name }}Model $random)
    {
{% for column in columns %}
        // Testing get by {{ column.getFieldSanitised }}
        $this->assertContainsOnlyInstancesOf(
            {{ class_name }}Model::class,
            $this->{{ variable_name }}Service->getManyByField(
                {{ class_name }}Model::FIELD_{{ column.getFieldSanitised|upper }},
                $random->get{{ column.getFieldSanitised }}(),
                5
            )
        );
{% endfor %}
    }

    private function getMockDataFilter(): \Closure
    {
{% if primary_keys is not empty %}
        $mockData = self::$MockData;
        return function (Where $where) use ($mockData) {
            $where
{% for primary_func,primary_db in primary_keys %}
                ->nest()
{% for i in range (0,5) %}
                    ->equalTo({{ class_name }}Model::FIELD_{{ primary_func|upper }}, $mockData[{{ i }}]->get{{ primary_func }}())
{% if not loop.last %}
                    ->or
{% endif %}
{% endfor %}
                ->unnest()
{% if not loop.last %}
                ->and
{% else %}
                ;
{% endif %}
{% endfor %}
        };
{% else %}
        return [];
{% endif %}
    }

    /**
     * @depends testGetRandom
     */
    public function testGetManyMatching({{ class_name }}Model $random)
    {
        $filter = $this->getMockDataFilter();

        $all = $this->{{ variable_name }}Service->getManyMatching($filter);
        $this->assertGreaterThan(0, count($all));
        $this->assertContainsOnlyInstancesOf({{ class_name }}Model::class, $all);

        $one = $this->{{ variable_name }}Service->getManyMatching($filter, null, Select::ORDER_ASCENDING, 1);
        $this->assertEquals(1, count($one));
        $this->assertContainsOnlyInstancesOf({{ class_name }}Model::class, $one);

{% for primary,db in primary_keys %}
        $asc  = $this->{{ variable_name }}Service->getMatching($filter, {{ class_name }}Model::FIELD_{{ primary|upper }}, Select::ORDER_ASCENDING);
        $desc = $this->{{ variable_name }}Service->getMatching($filter, {{ class_name }}Model::FIELD_{{ primary|upper }}, Select::ORDER_DESCENDING);
        $this->assertEquals({{ variable_name }}Model::class, get_class($asc));
        $this->assertEquals({{ variable_name }}Model::class, get_class($desc));
        $this->assertNotEquals($asc, $desc);
        $this->assertEquals($random, $this->{{ variable_name }}Service->getMatching([{{ class_name }}Model::FIELD_{{ primary|upper }} => $random->get{{ primary }}()]));
{% endfor %}
    }

    /**
     * @depends testGetRandom
     */
    public function testGetMatching({{ class_name }}Model $random)
    {
        $filter = $this->getMockDataFilter();

        $all = $this->{{ variable_name }}Service->getMatching($filter);
        $this->assertEquals({{ variable_name }}Model::class, get_class($all));

{% for primary,db in primary_keys %}
        $asc  = $this->{{ variable_name }}Service->getMatching($filter, {{ class_name }}Model::FIELD_{{ primary|upper }}, Select::ORDER_ASCENDING);
        $desc = $this->{{ variable_name }}Service->getMatching($filter, {{ class_name }}Model::FIELD_{{ primary|upper }}, Select::ORDER_DESCENDING);
        $this->assertEquals({{ variable_name }}Model::class, get_class($asc));
        $this->assertEquals({{ variable_name }}Model::class, get_class($desc));
        $this->assertNotEquals($asc, $desc);
        $this->assertEquals($random, $this->{{ variable_name }}Service->getMatching([{{ class_name }}Model::FIELD_{{ primary|upper }} => $random->get{{ primary }}()]));
{% endfor %}
    }

    public function testDeleteById()
    {
        /** @var {{ class_name }}Model[] $allDeleted */
        $allDeleted = [];
        /** @var {{ class_name }}Model $deleteable */
{% for primary,db in primary_keys %}
        $deleteable = $this->{{ variable_name }}TableGateway
            ->getNewMockModelInstance()
            ->save();

        $this->assertEquals(1, $this->{{ variable_name }}Service->deleteByField({{ class_name }}Model::FIELD_{{ primary|upper }}, $deleteable->get{{ primary }}()));
        $allDeleted[] = $deleteable;
{% endfor %}
        return $allDeleted;
    }

    /**
     * @depends testDeleteById
     */
    public function testDeleteByIdVerify(array $allDeleted)
    {
        /** @var {{ class_name }}Model $deleteable */
{% for primary,db in primary_keys %}
        // By {{ primary }}
        $deleteable = array_pop($allDeleted);
        ${{ variable_name }}Service = App::Container()->get(Services\{{ class_name }}Service::class);
        $this->assertEquals(null, $this->{{ variable_name }}Service->getByField({{ class_name }}Model::FIELD_{{ primary|upper }}, $deleteable->get{{ primary }}()));
{% endfor %}
    }

    public function testGetTermPlural()
    {
        $this->assertNotEmpty($this->{{ variable_name }}Service->getTermPlural());
    }

    public function testGetTermSingular()
    {
        $this->assertNotEmpty($this->{{ variable_name }}Service->getTermSingular());
    }
}
